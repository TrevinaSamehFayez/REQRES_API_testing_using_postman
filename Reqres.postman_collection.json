{
	"info": {
		"_postman_id": "ab6c4571-6ab0-4fe1-835f-287361787ee7",
		"name": "Reqres",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30808023"
	},
	"item": [
		{
			"name": "Get Users",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{reqres_url}}users?page=2",
					"host": [
						"{{reqres_url}}users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User object is present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.an(\"object\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Check user fields are correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(2);\r",
							"    pm.expect(jsonData.email).to.eql(\"janet.weaver@reqres.in\");\r",
							"    pm.expect(jsonData.first_name).to.eql(\"Janet\");\r",
							"    pm.expect(jsonData.last_name).to.eql(\"Weaver\");\r",
							"    pm.expect(jsonData.avatar).to.eql(\"https://reqres.in/img/faces/2-image.jpg\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{reqres_url}}users/2",
					"host": [
						"{{reqres_url}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User Not Found",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{reqres_url}}unknown",
					"host": [
						"{{reqres_url}}unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Of Resources",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get Single Resource",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Single Resource Not Found",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Delayed Response",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"User object is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.an(\"object\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Chack Data is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"    pm.expect(jsonData.job).to.eql(\"leader\");\r",
							"    pm.expect(jsonData.id).to.eql(\"792\");\r",
							"    pm.expect(jsonData.createdAt).to.eql(\"2025-09-22T15:02:18.720Z\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres_url}}users",
					"host": [
						"{{reqres_url}}users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User object is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Check Data is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check the presence updatedAt\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres_url}}users/2",
					"host": [
						"{{reqres_url}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Data",
			"request": {
				"method": "PATCH",
				"header": []
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}"
				},
				"url": {
					"raw": "{{reqres_url}}users/2",
					"host": [
						"{{reqres_url}}users"
					],
					"path": [
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Successful",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{reqres_url}}register",
					"host": [
						"{{reqres_url}}register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Unsuccessful",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres_url}}register",
					"host": [
						"{{reqres_url}}register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Object is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Check Data is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.eql(\"QpwL5tke4Pnpja7X4\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres_url}}login",
					"host": [
						"{{reqres_url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error object is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Check Data is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{reqres_url}}login",
					"host": [
						"{{reqres_url}}login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (pm.request.url.toString().includes(\"delay\")) {\r",
					"    pm.test(\"Response time is more than 500ms\", function () {\r",
					"        pm.expect(pm.response.responseTime).to.be.above(500);\r",
					"    });\r",
					"} else {\r",
					"    pm.test(\"Response time is less than 500ms\", function () {\r",
					"        pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"    });\r",
					"}\r",
					"if (pm.request.method !== \"DELETE\") {\r",
					"    pm.test(\"Content-Type is JSON\", function () {\r",
					"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
					"    });\r",
					"}"
				]
			}
		}
	]
}